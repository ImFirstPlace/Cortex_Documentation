import{_ as a,o as n,c as e,a as t}from"./app-0b6cd075.js";const s={},o=t(`<h1 id="server-recieve-api" tabindex="-1"><a class="header-anchor" href="#server-recieve-api" aria-hidden="true">#</a> Server Recieve API</h1><p><strong>How to fetch the API</strong></p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> API <span class="token operator">=</span> LocationToElevatorModel<span class="token punctuation">.</span>Cortex_API
</code></pre></div><p><strong>How to check for a protocol event</strong></p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code>API<span class="token punctuation">.</span>Event<span class="token punctuation">:</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
    <span class="token comment">-- If checks go in here</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="on-elevator-call" tabindex="-1"><a class="header-anchor" href="#on-elevator-call" aria-hidden="true">#</a> On Elevator Call</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onElevatorCall&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.floor</td><td><code>destination</code></td></tr></tbody></table><h2 id="on-call-enter" tabindex="-1"><a class="header-anchor" href="#on-call-enter" aria-hidden="true">#</a> On Call Enter</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onCallEnter&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params</td><td><code>floor</code></td></tr></tbody></table><h2 id="on-call-remove" tabindex="-1"><a class="header-anchor" href="#on-call-remove" aria-hidden="true">#</a> On Call Remove</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onCallRemove&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params</td><td><code>floor</code></td></tr></tbody></table><h2 id="on-door-open" tabindex="-1"><a class="header-anchor" href="#on-door-open" aria-hidden="true">#</a> On Door Open</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onDoorOpen&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.side</td><td><code>sideIndex</code></td></tr></tbody></table><h2 id="on-door-reopen" tabindex="-1"><a class="header-anchor" href="#on-door-reopen" aria-hidden="true">#</a> On Door Reopen</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onDoorReopen&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.side</td><td><code>sideIndex</code></td></tr></tbody></table><h2 id="on-door-close" tabindex="-1"><a class="header-anchor" href="#on-door-close" aria-hidden="true">#</a> On Door Close</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onDoorClose&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.side</td><td><code>sideIndex</code></td></tr></tbody></table><h2 id="on-depart-start" tabindex="-1"><a class="header-anchor" href="#on-depart-start" aria-hidden="true">#</a> On Depart Start</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onDepartStart&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.directionString</td><td><strong>U</strong> / <strong>D</strong></td></tr><tr><td>params.directionValue</td><td><strong>1</strong> / <strong>-1</strong></td></tr></tbody></table><h2 id="on-depart-pre-start-cancel" tabindex="-1"><a class="header-anchor" href="#on-depart-pre-start-cancel" aria-hidden="true">#</a> On Depart Pre Start Cancel</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onDepartPreStartCancel&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><h2 id="on-elevator-move-begin" tabindex="-1"><a class="header-anchor" href="#on-elevator-move-begin" aria-hidden="true">#</a> On Elevator Move Begin</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onElevatorMoveBegin&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.directionString</td><td><strong>U</strong> / <strong>D</strong></td></tr><tr><td>params.directionValue</td><td><strong>1</strong> / <strong>-1</strong></td></tr></tbody></table><h2 id="on-elevator-stop" tabindex="-1"><a class="header-anchor" href="#on-elevator-stop" aria-hidden="true">#</a> On Elevator Stop</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onElevatorStop&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.floor</td><td><code>arriveFloor</code></td></tr></tbody></table><h2 id="on-elevator-arrive" tabindex="-1"><a class="header-anchor" href="#on-elevator-arrive" aria-hidden="true">#</a> On Elevator Arrive</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onElevatorArrive&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.floor</td><td><code>floor</code></td></tr><tr><td>params.direction</td><td><code>queueDirection</code> <strong>U</strong> / <strong>N</strong> / <strong>D</strong></td></tr><tr><td>params.parking</td><td><code>boolean</code></td></tr></tbody></table><h2 id="on-leveling-state-change" tabindex="-1"><a class="header-anchor" href="#on-leveling-state-change" aria-hidden="true">#</a> On Leveling State Change</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onLevelingStageChange&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.brakingMode</td><td><code>brakingMode</code></td></tr><tr><td>params.stage</td><td><code>levelingStage</code></td></tr></tbody></table><h2 id="on-relevel-start" tabindex="-1"><a class="header-anchor" href="#on-relevel-start" aria-hidden="true">#</a> On Relevel Start</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onRelevelStart&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.direction</td><td><code>direction</code></td></tr></tbody></table><h2 id="on-safety-brake" tabindex="-1"><a class="header-anchor" href="#on-safety-brake" aria-hidden="true">#</a> On Safety Brake</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onSafetyBrake&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><h2 id="on-elevator-lantern-api" tabindex="-1"><a class="header-anchor" href="#on-elevator-lantern-api" aria-hidden="true">#</a> On Elevator Lantern API</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onElevatorLanternApi&#39;</span> <span class="token keyword">then</span>
    <span class="token comment">-- Code here</span>
<span class="token keyword">end</span>
</code></pre></div><p><strong>Returns</strong></p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>params.state</td><td><strong>active</strong> / <strong>neutral</strong></td></tr><tr><td>params.floor</td><td><code>floor</code></td></tr><tr><td>params.direction</td><td><code>queueDirection</code></td></tr><tr><td>params.type</td><td><strong>interior</strong> / <strong>exterior</strong></td></tr><tr><td>params.eventData</td><td><code>lanternEventData</code></td></tr><tr><td>params.conditionMet</td><td><code>boolean</code></td></tr></tbody></table><p><strong>Code Example</strong></p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>API<span class="token punctuation">.</span>Event<span class="token punctuation">:</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
    <span class="token keyword">if</span> protocol <span class="token operator">==</span> <span class="token string">&#39;onElevatorLanternApi&#39;</span> <span class="token keyword">then</span>
        <span class="token keyword">if</span> params<span class="token punctuation">.</span>floor <span class="token operator">~=</span> indicatorFloor <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token keyword">end</span>
        <span class="token keyword">if</span> params<span class="token punctuation">.</span>type <span class="token operator">~=</span> <span class="token string">&#39;exterior&#39;</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token keyword">end</span> <span class="token comment">-- Exterior lantern</span>
		<span class="token keyword">if</span> params<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">&#39;active&#39;</span> <span class="token keyword">then</span>
			<span class="token keyword">if</span> params<span class="token punctuation">.</span>conditionMet <span class="token keyword">then</span>
				<span class="token function">setArrowDirection</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>direction<span class="token punctuation">)</span>
			<span class="token keyword">end</span>
		<span class="token keyword">elseif</span> params<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">&#39;neutral&#39;</span> <span class="token keyword">then</span>
			<span class="token function">setArrowDirection</span><span class="token punctuation">(</span><span class="token string">&#39;N&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63),r=[o];function d(p,l){return n(),e("div",null,r)}const i=a(s,[["render",d],["__file","server-recieve-api.html.vue"]]);export{i as default};
